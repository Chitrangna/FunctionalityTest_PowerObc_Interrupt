
Power--OBCm-Power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b8  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055d  00000000  00000000  00001229  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000187  00000000  00000000  00001d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 77 00 	call	0xee	; 0xee <main>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TWI_init_slave>:

}

void TWI_init_slave(void)
{
	TWAR = 0x20;		//initialised the address of the slave as 0x20
  7c:	80 e2       	ldi	r24, 0x20	; 32
  7e:	82 b9       	out	0x02, r24	; 2
  80:	08 95       	ret

00000082 <__vector_19>:
#include "common.h"
#include "uart.h"
#include "i2c.h"
uint8_t data;

ISR(TWI_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	5f 93       	push	r21
  94:	6f 93       	push	r22
  96:	7f 93       	push	r23
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
  9c:	af 93       	push	r26
  9e:	bf 93       	push	r27
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	/*uint8_t data= TWI_read_data_slave();
	transmit_UART(data);*/
	//transmit_UART('1');
	//TWCR|= (1<<TWINT)|(1<<TWEA);//|(1<<TWEN);//|(1<<TWIE);
	switch(TWSR){
  a4:	81 b1       	in	r24, 0x01	; 1
  a6:	80 36       	cpi	r24, 0x60	; 96
  a8:	19 f0       	breq	.+6      	; 0xb0 <__vector_19+0x2e>
  aa:	80 38       	cpi	r24, 0x80	; 128
  ac:	29 f0       	breq	.+10     	; 0xb8 <__vector_19+0x36>
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <__vector_19+0x46>
		case 0x60://it is being addressed
		//transmit_UART('a');
		TWCR|= (1<<TWINT)|(1<<TWEA);	//sending ack
  b0:	86 b7       	in	r24, 0x36	; 54
  b2:	80 6c       	ori	r24, 0xC0	; 192
  b4:	86 bf       	out	0x36, r24	; 54
		break;
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <__vector_19+0x46>
		
		case 0x80://checking whether ack has been sent
		//transmit_UART('d');
		data=TWDR;
  b8:	83 b1       	in	r24, 0x03	; 3
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		transmit_UART(data);
  be:	0e 94 8d 00 	call	0x11a	; 0x11a <transmit_UART>
		//TWCR|= (1<<TWINT)|(1<<TWEA);//|(1<<TWEN);//|(1<<TWIE);
		TWCR|= (1<<TWINT)|(1<<TWEA);
  c2:	86 b7       	in	r24, 0x36	; 54
  c4:	80 6c       	ori	r24, 0xC0	; 192
  c6:	86 bf       	out	0x36, r24	; 54
		transmit_UART('f');
		TWCR|= (1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE)|(0<<TWSTA)|(0<<TWSTO);
		break;*/
		
	}
	TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  c8:	85 ec       	ldi	r24, 0xC5	; 197
  ca:	86 bf       	out	0x36, r24	; 54
}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <main>:

 
int main(void)
{
    // Initializations
    init_UART();
  ee:	0e 94 7f 00 	call	0xfe	; 0xfe <init_UART>
	TWI_init_slave();
  f2:	0e 94 3e 00 	call	0x7c	; 0x7c <TWI_init_slave>
	//_delay_ms(2000);
	sei();
  f6:	78 94       	sei
	TWCR = (1<<TWEN)|                             // TWI Interface enabled.
  f8:	85 ec       	ldi	r24, 0xC5	; 197
  fa:	86 bf       	out	0x36, r24	; 54
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0xe>

000000fe <init_UART>:


void init_UART(void )
{

  UCSRA = 0;
  fe:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
 100:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
 102:	10 bc       	out	0x20, r1	; 32
  
  ///Double Baud Rate
  UCSRA |= _BV(U2X);
 104:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |= _BV(RXEN) | _BV(TXEN);
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	88 61       	ori	r24, 0x18	; 24
 10a:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |= _BV(USBS) | _BV(UCSZ1) | _BV(UCSZ0);
 10c:	80 b5       	in	r24, 0x20	; 32
 10e:	8e 60       	ori	r24, 0x0E	; 14
 110:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  UBRRL = 103;
 112:	87 e6       	ldi	r24, 0x67	; 103
 114:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
 116:	10 bc       	out	0x20, r1	; 32
 118:	08 95       	ret

0000011a <transmit_UART>:
}

void transmit_UART(uint8_t data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSRA & (_BV(UDRE))) );
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <transmit_UART>
  //* Start transmission
  UDR = data;
 11e:	8c b9       	out	0x0c, r24	; 12
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
