
OBCm--OBCm-Power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f92  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abb  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000083f  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000400  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	8d d0       	rcall	.+282    	; 0x1ce <main>
  b4:	05 c1       	rjmp	.+522    	; 0x2c0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <TWI_init_master>:
{
	char recv_data;
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
	recv_data=TWDR;//PORTA=recv_data;
  b8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  bc:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  c6:	08 95       	ret

000000c8 <TWI_start>:
  c8:	e4 e7       	ldi	r30, 0x74	; 116
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	a1 e7       	ldi	r26, 0x71	; 113
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	90 83       	st	Z, r25
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	ec f7       	brge	.-6      	; 0xd4 <TWI_start+0xc>
  da:	8c 91       	ld	r24, X
  dc:	88 7f       	andi	r24, 0xF8	; 248
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	c1 f7       	brne	.-16     	; 0xd2 <TWI_start+0xa>
  e2:	08 95       	ret

000000e4 <TWI_write_address>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	c3 e7       	ldi	r28, 0x73	; 115
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	e4 e7       	ldi	r30, 0x74	; 116
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	44 e8       	ldi	r20, 0x84	; 132
  f2:	30 e1       	ldi	r19, 0x10	; 16
  f4:	20 e3       	ldi	r18, 0x30	; 48
  f6:	a1 e7       	ldi	r26, 0x71	; 113
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	88 83       	st	Y, r24
  fc:	40 83       	st	Z, r20
  fe:	3b bb       	out	0x1b, r19	; 27
 100:	90 81       	ld	r25, Z
 102:	99 23       	and	r25, r25
 104:	ec f7       	brge	.-6      	; 0x100 <TWI_write_address+0x1c>
 106:	2b bb       	out	0x1b, r18	; 27
 108:	9c 91       	ld	r25, X
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	98 31       	cpi	r25, 0x18	; 24
 10e:	a9 f7       	brne	.-22     	; 0xfa <TWI_write_address+0x16>
 110:	80 e7       	ldi	r24, 0x70	; 112
 112:	8b bb       	out	0x1b, r24	; 27
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	81 ee       	ldi	r24, 0xE1	; 225
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <TWI_write_address+0x36>
 122:	00 c0       	rjmp	.+0      	; 0x124 <TWI_write_address+0x40>
 124:	00 00       	nop
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <TWI_write_data>:
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	a8 2e       	mov	r10, r24
 142:	03 e7       	ldi	r16, 0x73	; 115
 144:	10 e0       	ldi	r17, 0x00	; 0
 146:	c4 e7       	ldi	r28, 0x74	; 116
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	0f 2e       	mov	r0, r31
 14c:	f4 e8       	ldi	r31, 0x84	; 132
 14e:	bf 2e       	mov	r11, r31
 150:	f0 2d       	mov	r31, r0
 152:	68 94       	set
 154:	cc 24       	eor	r12, r12
 156:	c5 f8       	bld	r12, 5
 158:	68 94       	set
 15a:	dd 24       	eor	r13, r13
 15c:	d6 f8       	bld	r13, 6
 15e:	0f 2e       	mov	r0, r31
 160:	f1 e7       	ldi	r31, 0x71	; 113
 162:	ef 2e       	mov	r14, r31
 164:	f1 2c       	mov	r15, r1
 166:	f0 2d       	mov	r31, r0
 168:	f8 01       	movw	r30, r16
 16a:	a0 82       	st	Z, r10
 16c:	b8 82       	st	Y, r11
 16e:	81 e6       	ldi	r24, 0x61	; 97
 170:	a3 d0       	rcall	.+326    	; 0x2b8 <transmit_UART0>
 172:	cb ba       	out	0x1b, r12	; 27
 174:	f8 01       	movw	r30, r16
 176:	80 81       	ld	r24, Z
 178:	9f d0       	rcall	.+318    	; 0x2b8 <transmit_UART0>
 17a:	88 81       	ld	r24, Y
 17c:	88 23       	and	r24, r24
 17e:	ec f7       	brge	.-6      	; 0x17a <TWI_write_data+0x4e>
 180:	81 e6       	ldi	r24, 0x61	; 97
 182:	9a d0       	rcall	.+308    	; 0x2b8 <transmit_UART0>
 184:	db ba       	out	0x1b, r13	; 27
 186:	f7 01       	movw	r30, r14
 188:	80 81       	ld	r24, Z
 18a:	88 7f       	andi	r24, 0xF8	; 248
 18c:	88 32       	cpi	r24, 0x28	; 40
 18e:	61 f7       	brne	.-40     	; 0x168 <TWI_write_data+0x3c>
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	8b bb       	out	0x1b, r24	; 27
 194:	ff ef       	ldi	r31, 0xFF	; 255
 196:	21 ee       	ldi	r18, 0xE1	; 225
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	f1 50       	subi	r31, 0x01	; 1
 19c:	20 40       	sbci	r18, 0x00	; 0
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <TWI_write_data+0x6e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <TWI_write_data+0x78>
 1a4:	00 00       	nop
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	bf 90       	pop	r11
 1b8:	af 90       	pop	r10
 1ba:	08 95       	ret

000001bc <TWI_stop>:
}

void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 1bc:	84 e9       	ldi	r24, 0x94	; 148
 1be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
 1c2:	e4 e7       	ldi	r30, 0x74	; 116
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	84 ff       	sbrs	r24, 4
 1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <TWI_stop+0xa>
}
 1cc:	08 95       	ret

000001ce <main>:
#include "i2c.h"


int main(void)
{
	DDRA = 0xF0;
 1ce:	80 ef       	ldi	r24, 0xF0	; 240
	// Initializations 
	init_UART0();
 1d0:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	61 d0       	rcall	.+194    	; 0x296 <init_UART0>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	82 e5       	ldi	r24, 0x52	; 82
 1d8:	97 e0       	ldi	r25, 0x07	; 7
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xc>
	//PORTA = 0xF0;
	_delay_ms(300);
	TWI_init_master();
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x16>
	// Variables 
	
	//receive_UART0();
	//sei();
	uint8_t m=100;
	transmit_UART0(m);
 1e4:	00 00       	nop
	transmit_UART0('a');
 1e6:	68 df       	rcall	.-304    	; 0xb8 <TWI_init_master>
	transmit_UART0('b');
 1e8:	84 e6       	ldi	r24, 0x64	; 100
 1ea:	66 d0       	rcall	.+204    	; 0x2b8 <transmit_UART0>
 1ec:	81 e6       	ldi	r24, 0x61	; 97
	transmit_UART0('c');
 1ee:	64 d0       	rcall	.+200    	; 0x2b8 <transmit_UART0>
 1f0:	82 e6       	ldi	r24, 0x62	; 98
 1f2:	62 d0       	rcall	.+196    	; 0x2b8 <transmit_UART0>
 1f4:	83 e6       	ldi	r24, 0x63	; 99
 1f6:	60 d0       	rcall	.+192    	; 0x2b8 <transmit_UART0>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	81 ee       	ldi	r24, 0xE1	; 225
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
    while (1) 
    {
		uint8_t data= '5';
		//uint8_t data=receive_UART0();
		transmit_UART0('1');
		PORTA = 0x10;
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x30>
		_delay_ms(100);
		
		TWI_start();
		transmit_UART0('a');
		PORTA = 0x20;
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x3a>
		_delay_ms(100);
		
		TWI_write_address(0x20);
		transmit_UART0('b');
		PORTA = 0x40;
 208:	00 00       	nop
		_delay_ms(100);
		
		TWI_write_data(data);
		transmit_UART0('c');
		PORTA=0x80;
 20a:	00 e1       	ldi	r16, 0x10	; 16
	
    while (1) 
    {
		uint8_t data= '5';
		//uint8_t data=receive_UART0();
		transmit_UART0('1');
 20c:	c0 e2       	ldi	r28, 0x20	; 32
 20e:	10 e4       	ldi	r17, 0x40	; 64
 210:	d0 e8       	ldi	r29, 0x80	; 128
		PORTA = 0x10;
 212:	81 e3       	ldi	r24, 0x31	; 49
 214:	51 d0       	rcall	.+162    	; 0x2b8 <transmit_UART0>
 216:	0b bb       	out	0x1b, r16	; 27
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	80 e7       	ldi	r24, 0x70	; 112
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
		_delay_ms(100);
		
		TWI_start();
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x50>
		transmit_UART0('a');
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x5a>
 228:	00 00       	nop
 22a:	4e df       	rcall	.-356    	; 0xc8 <TWI_start>
		PORTA = 0x20;
 22c:	81 e6       	ldi	r24, 0x61	; 97
 22e:	44 d0       	rcall	.+136    	; 0x2b8 <transmit_UART0>
 230:	cb bb       	out	0x1b, r28	; 27
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	80 e7       	ldi	r24, 0x70	; 112
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
		_delay_ms(100);
		
		TWI_write_address(0x20);
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x6a>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x74>
		transmit_UART0('b');
 242:	00 00       	nop
 244:	8c 2f       	mov	r24, r28
 246:	4e df       	rcall	.-356    	; 0xe4 <TWI_write_address>
 248:	82 e6       	ldi	r24, 0x62	; 98
 24a:	36 d0       	rcall	.+108    	; 0x2b8 <transmit_UART0>
 24c:	1b bb       	out	0x1b, r17	; 27
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	80 e7       	ldi	r24, 0x70	; 112
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	21 50       	subi	r18, 0x01	; 1
		PORTA = 0x40;
		_delay_ms(100);
		
		TWI_write_data(data);
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
		transmit_UART0('c');
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x86>
		PORTA=0x80;
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x90>
 25e:	00 00       	nop
 260:	85 e3       	ldi	r24, 0x35	; 53
 262:	64 df       	rcall	.-312    	; 0x12c <TWI_write_data>
 264:	83 e6       	ldi	r24, 0x63	; 99
 266:	28 d0       	rcall	.+80     	; 0x2b8 <transmit_UART0>
 268:	db bb       	out	0x1b, r29	; 27
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	80 e7       	ldi	r24, 0x70	; 112
 26e:	92 e0       	ldi	r25, 0x02	; 2
		_delay_ms(100);
		
		TWI_stop();
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
		transmit_UART0('d');
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0xa2>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0xac>
 27a:	00 00       	nop
 27c:	9f df       	rcall	.-194    	; 0x1bc <TWI_stop>
 27e:	84 e6       	ldi	r24, 0x64	; 100
 280:	1b d0       	rcall	.+54     	; 0x2b8 <transmit_UART0>
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	80 e7       	ldi	r24, 0x70	; 112
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0xba>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0xc4>
 292:	00 00       	nop
 294:	be cf       	rjmp	.-132    	; 0x212 <main+0x44>

00000296 <init_UART0>:
void transmit_UART1(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR1A & (_BV(UDRE1))) );
  //* Start transmission
  UDR1 = data;
 296:	1b b8       	out	0x0b, r1	; 11
 298:	1a b8       	out	0x0a, r1	; 10
 29a:	e5 e9       	ldi	r30, 0x95	; 149
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	10 82       	st	Z, r1
 2a0:	59 9a       	sbi	0x0b, 1	; 11
 2a2:	8a b1       	in	r24, 0x0a	; 10
 2a4:	88 61       	ori	r24, 0x18	; 24
 2a6:	8a b9       	out	0x0a, r24	; 10
 2a8:	80 81       	ld	r24, Z
 2aa:	8e 60       	ori	r24, 0x0E	; 14
 2ac:	80 83       	st	Z, r24
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	89 b9       	out	0x09, r24	; 9
 2b2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 2b6:	08 95       	ret

000002b8 <transmit_UART0>:
}

void transmit_UART0(uint8_t data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 2b8:	5d 9b       	sbis	0x0b, 5	; 11
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 2bc:	8c b9       	out	0x0c, r24	; 12
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
